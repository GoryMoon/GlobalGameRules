buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = mod_version
group = "se.gory_moon" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "GlobalGameRules-$mc_version"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

if (System.getenv().BUILD_NUMBER != null) { //adds the build number to the end of the version string if on a build server
    version += ".${System.getenv().BUILD_NUMBER}"
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mcp_channel, version: mcp_mappings
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'CORE,LOADING,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                globalgamerules {
                    source sourceSets.main
                }
            }
            // Intellij stuff
            ideaModule "${project.name}.main"
            environment 'MOD_CLASSES', "${project.file("out/production/resources").canonicalPath}${File.pathSeparatorChar}${project.file("out/production/classes").canonicalPath}"
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'CORE,LOADING,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                globalgamerules {
                    source sourceSets.main
                }
            }
            // Intellij stuff
            ideaModule "${project.name}.main"
            environment 'MOD_CLASSES', "${project.file("out/production/resources").canonicalPath}${File.pathSeparatorChar}${project.file("out/production/classes").canonicalPath}"
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'CORE,LOADING,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'forge,globalgamerules', '--all', '--output', file('src/generated/resources/')

            mods {
                globalgamerules {
                    source sourceSets.main
                }
            }
            // Intellij stuff
            ideaModule "${project.name}.main"
            environment 'MOD_CLASSES', "${project.file("out/production/resources").canonicalPath}${File.pathSeparatorChar}${project.file("out/production/classes").canonicalPath}"
        }
    }
}


dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

task devJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include '**'
    }

    extension = 'jar'
    classifier = 'dev'
}

task sourceJar(type: Jar) {
    from(sourceSets.main.allSource) {
        include '**'
    }
    extension = 'jar'
    classifier = 'sources'
}

artifacts {
    archives devJar
    archives sourceJar
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "globalgamerules",
            "Specification-Vendor": "Gory_Moon",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Gory_Moon",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

if (project.hasProperty("local_maven")) {
    // Example configuration to allow publishing using the maven-publish task
    // we define a custom artifact that is sourced from the reobfJar output task
    // and then declare that to be published
    // Note you'll need to add a repository here
    def reobfFile = file("$buildDir/reobfJar/output.jar")
    def reobfArtifact = artifacts.add('default', reobfFile) {
        type 'jar'
        builtBy 'reobfJar'
    }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.archivesBaseName
                artifact reobfArtifact
                artifact devJar
                artifact sourceJar
            }
        }
        repositories {
            maven {
                url "file://${project.getProperty('local_maven')}"
            }
        }
    }
}
/*
uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty("maven_url")) {
                logger.info('Publishing to files server')
                configuration = configurations.deployerJars

                repository(url: project.maven_url) {
                    authentication(userName: project.maven_username ?: "", password: project.maven_password ?: "")
                }
            } else if (project.hasProperty("local_maven")) {
                repository(url: "file://${project.getProperty('local_maven')}")
            }

            pom {
                groupId = project.group
                version = project.version
                artifactId = project.archivesBaseName
            }

            pom.project {
                name project.archivesBaseName
                packaging 'jar'
                description 'GlobalGameRules'
                url 'https://github.com/GoryMoon/GlobalGameRules/'

                scm {
                    url 'https://github.com/GoryMoon/GlobalGameRules/'
                    connection 'scm:git:git://github.com/GoryMoon/GlobalGameRules.git'
                    developerConnection 'scm:git:git@github.com/GoryMoon/GlobalGameRules.git'
                }

                issueManagement {
                    system 'github'
                    url 'https://github.com/GoryMoon/GlobalGameRules/issues'
                }

                licenses {
                    license {
                        name 'GNU Lesser General Public License 3.0'
                        url 'https://www.gnu.org/licenses/lgpl-3.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'Gory_Moon'
                        name 'Gory_Moon'
                        roles {
                            role 'developer'
                        }
                    }
                }
            }
        }
    }
}
*/